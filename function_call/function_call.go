package function_call

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"

	"cloud.google.com/go/vertexai/genai"
)

// 실제 함수 1: 제품 SKU 조회
func getProductSku(productName string) map[string]any {
	return map[string]any{
		"sku":      "GA04834-US",
		"in_stock": "yes",
	}
}

// 실제 함수 2: 매장 위치 조회
func getStoreLocation(location string) map[string]any {
	return map[string]any{
		"store": "2000 N Shoreline Blvd, Mountain View, CA 94043, US",
	}
}

func functionCallsChat(w io.Writer, projectID, location, modelName string) error {
	ctx := context.Background()
	client, err := genai.NewClient(ctx, projectID, location)
	if err != nil {
		return fmt.Errorf("unable to create client: %w", err)
	}
	defer client.Close()

	model := client.GenerativeModel(modelName)

	// 함수 선언
	paramsProduct := &genai.Schema{
		Type: genai.TypeObject,
		Properties: map[string]*genai.Schema{
			"productName": {
				Type:        genai.TypeString,
				Description: "Product name",
			},
		},
	}
	fundeclProductInfo := &genai.FunctionDeclaration{
		Name:        "getProductSku",
		Description: "Get the SKU for a product",
		Parameters:  paramsProduct,
	}

	paramsStore := &genai.Schema{
		Type: genai.TypeObject,
		Properties: map[string]*genai.Schema{
			"location": {
				Type:        genai.TypeString,
				Description: "Location",
			},
		},
	}
	fundeclStoreLocation := &genai.FunctionDeclaration{
		Name:        "getStoreLocation",
		Description: "Get the location of the closest store",
		Parameters:  paramsStore,
	}

	model.Tools = []*genai.Tool{
		{FunctionDeclarations: []*genai.FunctionDeclaration{
			fundeclProductInfo,
			fundeclStoreLocation,
		}},
	}
	model.SetTemperature(0.0)

	chat := model.StartChat()

	// 1. 첫 번째 질문: 제품 재고 확인
	prompt := "Do you have the Pixel 8 Pro in stock?"
	fmt.Fprintf(w, "Question: %s\n", prompt)
	if err := processChatMessage(w, chat, ctx, prompt); err != nil {
		return err
	}

	// 2. 두 번째 질문: 매장 위치 확인
	prompt2 := "Is there a store in Mountain View, CA that I can visit to try it out?"
	fmt.Fprintf(w, "Question: %s\n", prompt2)
	if err := processChatMessage(w, chat, ctx, prompt2); err != nil {
		return err
	}

	// 3.
	prompt3 := "Explain History of Tokyo?"
	fmt.Fprintf(w, "Question: %s\n", prompt3)
	if err := processChatMessage(w, chat, ctx, prompt3); err != nil {
		return err
	}

	return nil
}

// processChatMessage: 응답 타입에 따라 함수 호출 또는 일반 답변 처리
func processChatMessage(w io.Writer, chat *genai.ChatSession, ctx context.Context, prompt string) error {
	resp, err := chat.SendMessage(ctx, genai.Text(prompt))
	if err != nil {
		return err
	}
	if len(resp.Candidates) == 0 || len(resp.Candidates[0].Content.Parts) == 0 {
		return errors.New("empty response from model")
	}

	part := resp.Candidates[0].Content.Parts[0]
	switch v := part.(type) {
	case genai.FunctionCall:
		// 함수 호출을 처리할 수 있는 핸들러가 있는지 확인
		var result map[string]any
		var err error
		switch v.Name {
		case "getProductSku":
			productName, ok := v.Args["productName"].(string)
			if !ok {
				err = fmt.Errorf("invalid productName")
			} else {
				// 실제 핸들러가 있다면 처리
				result = getProductSku(productName)
			}
		case "getStoreLocation":
			location, ok := v.Args["location"].(string)
			if !ok {
				err = fmt.Errorf("invalid location")
			} else {
				// 실제 핸들러가 있다면 처리
				result = getStoreLocation(location)
			}
		default:
			// 지원하지 않는 함수일 경우
			err = fmt.Errorf("unsupported function: %s", v.Name)
		}

		if err != nil {
			// 함수 호출을 처리할 수 없거나 지원하지 않는 경우
			// LLM의 원본 응답(함수 호출 객체)을 출력
			jsondata, _ := json.MarshalIndent(v, "", "  ")
			fmt.Fprintf(w, "Answer generated by the model:\n\t%s\n\n", string(jsondata))
			return nil
		}

		// 함수 호출을 처리할 수 있으면 기존 로직대로 진행
		jsondata, _ := json.MarshalIndent(result, "", "  ")
		fmt.Fprintf(w, "function call response sent to the model:\n\t%s\n\n", string(jsondata))

		funresp := &genai.FunctionResponse{
			Name:     v.Name,
			Response: result,
		}
		resp, err = chat.SendMessage(ctx, funresp)
		if err != nil {
			return err
		}
		if len(resp.Candidates) == 0 || len(resp.Candidates[0].Content.Parts) == 0 {
			return errors.New("empty response from model")
		}
		jsondata, _ = json.MarshalIndent(resp.Candidates[0].Content.Parts[0], "", "  ")
		fmt.Fprintf(w, "Answer generated by the model(Function):\n\t%s\n\n", string(jsondata))
	default:
		// 함수 호출이 아닌 경우 일반 답변 출력
		jsondata, _ := json.MarshalIndent(part, "", "  ")
		fmt.Fprintf(w, "Answer generated by the model(LLM):\n\t%s\n\n", string(jsondata))
	}
	return nil
}
